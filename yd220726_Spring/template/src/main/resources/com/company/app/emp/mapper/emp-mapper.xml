<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.company.app.emp.mapper.EmpMapper">

  <select id="getEmp" resultType="EmpVO">
    select * from employees
    where
    employee_id=#{employeeId}
  </select>

  <select id="getEmpList" parameterType="EmpReqVO" resultType="EmpVO">
    select * from employees
    <where>
      <if test="employeeId != null and employeeId != ''">
        and employee_id = #{employeeId}
      </if>
      <if test="jobId != null and jobId != ''">
        and job_id = #{jobId}
      </if>

      <if test="depts != null">
        and department_id in(
        <foreach item="item" collection="depts" separator=","> #{item}</foreach>
        )
      </if>

      <if test="sdt != null">
        and hire_date >= #{sdt}
      </if>
      <if test="edt != null">
				<![CDATA[and hire_date <= #{edt}]]>
      </if>

    </where>
    order by 1
  </select>

  <insert id="insertEmp">
    <!-- 사번넘버링: selectKey대신 시퀀스 만들어서 사용해도 됨 -->
    <selectKey keyProperty="employeeId" order="BEFORE" resultType="string">
      select nvl(max(employee_id),0)+1 from employees
    </selectKey>
    insert into employees(employee_id, first_name, last_name, email, hire_date, job_id)
    values(#{employeeId}, #{firstName}, #{lastName}, #{email}, #{hireDate}, #{jobId})
  </insert>

  <update id="updateEmp">
    update employees set
    first_name = #{firstName},
    last_name = #{lastName},
    email = #{email},
    hire_date = #{hireDate},
    job_id = #{jobId}
    where employee_id = #{employeeId}
  </update>

  <delete id="deleteEmp">
    delete from employees
    where employee_id = #{employeeId}
  </delete>
  
  
  
  
  <!-- 방법1: resultMap="empDeptMap" -->
  <!-- 방법2: resultType="EmpVO" 하고 열마나 "depts.departmentName"이런식으로 별칭 달아줌 -->
  <resultMap type="EmpVO" id="empDeptMap">
    <id column="employee_id" property="employeeId" />
    <result column="first_name" property="firstName" />
    <result column="last_name" property="lastName" />
    <association property="depts" javaType="DepVO">
      <id column="department_id" property="departmentId" />
      <result column="department_name" property="departmentName" />
      <result column="manager_id" property="managerId" />
      <result column="location_id" property="locationId" />
    </association>
  </resultMap>
  
  <select id="getEmpDept" resultMap="empDeptMap">
    select e.employee_id, 
           e.first_name,
           d.department_id,
           d.department_name, 
           d.manager_id, 
           d.location_id
    from employees e, departments d
    where e.department_id = d.department_id
  </select>
  
  
  <resultMap type="DepVO" id="deptEmpsMap">
    <id column="department_id" property="departmentId" />
    <result column="department_name" property="departmentName" />
    <result column="manager_id" property="managerId" />
    <result column="location_id" property="locationId" />
    <collection property="emp" ofType="EmpVO">
      <id column="employee_id" property="employeeId" />
      <result column="first_name" property="firstName" />
    </collection>
  </resultMap>
  
  <select id="getDeptEmps" resultMap="deptEmpsMap">
    select e.employee_id, 
           e.first_name,
           d.department_id,
           d.department_name, 
           d.manager_id, 
           d.location_id
    from employees e, departments d
    where e.department_id = d.department_id
  </select>
  
  
</mapper>